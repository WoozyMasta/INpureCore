<project name="INpureCore" default="main" basedir=".">
	<property environment="env"/>
	
	<property name="src.dir" value="src/main/java"/>
	<property name="api.dir" value="src/api/java"/>
	<property name="utils.dir" value="utils"/>
	<property name="deps.dir" value="deps"/>
	<property name="download.dir" value="downloads"/>
	<property name="build.dir" value="."/>
	<property name="gradle.output.dir" value="${build.dir}/build/libs"/>
	<property name="gradle.output" value="${gradle.output.dir}/modid-1.0.jar"/>
	<property name="reobf.dir" value="${build.dir}/reobf"/>
	<property name="bin.dir" value="${build.dir}/bin"/>
	<property name="lib.dir" value="${build.dir}/libs"/>
	<property name="forge.url" value="http://files.minecraftforge.net/maven/net/minecraftforge/forge/1.7.10-10.13.2.1232/forge-1.7.10-10.13.2.1232-src.zip"/>
	<!-- Project information -->
	<property name="build.name" value="${ant.project.name}"/>
	<property name="class.pckg" value="info/inpureprojects/core"/>
	<!-- Version file -->
	<property name="verclass.dir" value="${src.dir}/${class.pckg}" />
	<property name="verclass.name" value="modInfo.java"/>
	
	<property name="packaging.dir" value="${basedir}/build/dist"/>
	
	<!-- Classpaths -->
	<path id="gson">
		<fileset dir="${download.dir}">
			<include name="gson.jar"/>
		</fileset>
	</path>
	
	<target name="properties">
		<available property="has.folders" type="dir" file="${download.dir}"/>
		<available property="has.forge" file="${download.dir}/forge.zip"/>
	</target>
	
	<target name="make.dirs" unless="has.folders" depends="properties">
		<mkdir dir="${deps.dir}"/>
		<mkdir dir="${api.dir}"/>
		<mkdir dir="${download.dir}"/>
		<mkdir dir="${reobf.dir}"/>
		<mkdir dir="${bin.dir}"/>
		<mkdir dir="${lib.dir}"/>
	</target>
	
	<target name="setup.forge" depends="make.dirs" unless="has.forge">
		<echo message="Downloading ForgeGradle..."/>
		<get dest="${download.dir}/forge.zip">
			<url url="${forge.url}"/>
		</get>
		<get dest="${download.dir}/gson.jar">
			<url url="http://search.maven.org/remotecontent?filepath=com/google/code/gson/gson/2.3/gson-2.3.jar"/>
		</get>
		<echo message="Unzipping ForgeGradle..."/>
		<unzip src="${download.dir}/forge.zip" dest="${build.dir}" overwrite="false"/>
		<echo message="Cleaning up ForgeGradle files..."/>
		<delete>
			<fileset dir="${build.dir}">
				<include name="*.txt"/>
			</fileset>
		</delete>
		<delete dir="${build.dir}/eclipse"/>
		<delete dir="${build.dir}/src/main/java/com"/>
		<echo message="Running ForgeGradle Setup..."/>
		<chmod dir="${build.dir}" perm="ugo+rx" includes="gradlew"/>
		<exec dir="${build.dir}" executable="cmd" osfamily="windows">
			<arg line="/c gradlew.bat setupDecompWorkspace setupDevWorkspace idea --refresh-dependencies"/>
		</exec>
		<exec dir="${build.dir}" executable="sh" osfamily="unix">
			<arg line="gradlew setupDecompWorkspace setupDevWorkspace idea --refresh-dependencies"/>
		</exec>
	</target>
	
	<target name="setup" depends="setup.forge">
		<echo message="Setup: Complete."/>
	</target>
	
	<target name="compile" depends="setup">
		<exec dir="${build.dir}" executable="cmd" osfamily="windows">
			<arg line="/c gradlew.bat build"/>
		</exec>
		<exec dir="${build.dir}" executable="sh" osfamily="unix">
			<arg line="gradlew build"/>
		</exec>
	</target>
	
	<target name="get-version" depends="compile">
		<script language="javascript"><![CDATA[
			var name = project.getProperty("build.full");
			if (name == null || name == "") {
				name = project.getProperty("verclass.name");
				if (name == null || name == "") {
					project.setProperty("build.full", "-");
				}
			}
		]]></script>
		<local name="grep.out"/><local name="mfrv"/><local name="mcv"/>
		<!-- Read version out of file -->
		<script language="javascript"><![CDATA[
			importClass(java.io.File);
			importClass(java.util.Scanner);
			
			var mainClass = new File(project.getProperty("verclass.dir"), project.getProperty("verclass.name"));
			mainClass = new Scanner(mainClass, "UTF-8").useDelimiter("\\Z");
			var text = mainClass.next();
			mainClass.close();
			
			var matches = /[0-9.]+R[0-9.]+((RC|B)[0-9]+)?/.exec(text);
			
			project.setProperty("grep.out", matches[0]);
		]]></script>
		
		<!-- Split mod&mc version, update mcmod -->
		<script language="javascript" classpathref="gson"><![CDATA[
			importPackage(Packages.com.google.gson);
			importPackage(Packages.com.google.gson.stream);
			importPackage(java.io);
			importClass(java.util.Scanner);
			
			versionlist = project.getProperty("grep.out").split('R');

			mcversion = versionlist[0];
			mfrversion = versionlist[1];
			if (versionlist.length > 2)
				mfrversion = versionlist[1]+"R"+versionlist[2];
			
			project.setProperty("mfrv", mfrversion);
			project.setProperty("mcv", mcversion);
			
			var c = project.getProperty("build.channel");
			if (c == null || c == "")
				project.setProperty("build.channel", mfrversion.indexOf("B") > 0 ? "alpha" : (
													 mfrversion.indexOf("RC") > 0 ? "beta" : "release"));
			
			// open file and parse JSON structure
			var file = new File(project.getProperty("resources.dir") + "/mcmod.info");
			if (file.exists())
			{
				var mcmod = new Scanner(file, "UTF-8").useDelimiter("\\Z");
				var data = new JsonParser().parse(mcmod.next()).getAsJsonArray();
				mcmod.close();
				
				// update all version elements
				for (var i = 0, e = data.size(); i < e; ++i) {
					var element = data.get(i).getAsJsonObject();
					element.addProperty("version", mfrversion);
					element.addProperty("mcversion", mcversion);
				}
				
				// write file back, pretty-printed
				var output = new JsonWriter(new FileWriter(file));
				output.setIndent("    ");
				new Gson().toJson(data, output);
				output.close();
			}
		]]></script>
		<echo message="Version: ${mfrv}  Channel: ${build.channel}"/>
		<property name="build.full" value="-[${mcv}]${mfrv}-"/>
	</target>
	
	<target name="get-build-number" depends="build-number-there" unless="build.number">
		<echo message="!! No build number set !!"/>
		<property name="build.number" value="CUSTOM_BUILD"/>
	</target>

	<target name="build-number-there" depends="get-version" if="env.BUILD_NUMBER" unless="build.number">
		<echo message="Using build number ${env.BUILD_NUMBER}..."/>
		<property name="build.number" value="${env.BUILD_NUMBER}"/>
	</target>
	
	<target name="package" depends="build-number-there">
        <delete dir="${packaging.dir}"/>
		<mkdir dir="${packaging.dir}"/>
		<unzip src="${basedir}/build/libs/INpureCore-1.0.jar" dest="${packaging.dir}/classes"/>
		<jar destfile="${packaging.dir}/${build.name}${build.full}${build.number}.jar" basedir="${packaging.dir}/classes" manifest="${packaging.dir}/classes/META-INF/MANIFEST.MF"/>
		<delete dir="${packaging.dir}/classes"/>
	</target>
	
	<target name="main" depends="package">
		<echo message="Build script execution complete."/>
	</target>

</project>